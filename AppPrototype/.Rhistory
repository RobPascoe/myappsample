View(df2)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | country == "1997")
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | country == "1997")
View(df2)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)#%>%
View(df2)
View(df1)
View(df1)
View(df1)
df2 <- gapminder  %>%
select(year, lifeExp)#%>%
View(df1)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)#%>%
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | country == "1997")
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == 1962 | country == 1997)
t.test(dat = df2, lifeExp ~ year)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == 1962 | country == 1997)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year = 1962 | country = 1997)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year = 1962 | country = 1997)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year = 1962 | year = 1997)
t.test(dat = df2, lifeExp ~ year)
View(df2)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year = "1962" | year = "1997")
t.test(dat = df2, lifeExp ~ year)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)#%>%
View(df2)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)#%>%
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year = "1962" | year = "1997")
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year = "1962" | year = "1997")
View(df2)
library(gapminder)
library(plyr)
data("gapminder")
library(dplyr)
library(ggplot2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year = "1962" | year = "1997")
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year = "1962" , year = "1997")
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | year == "1997")
View(df2)
t.test(data = df2, lifeExp ~ year)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp, country)%>%
filter(year == "1962" | year == "1997")
t.test(data = df2, lifeExp ~ year)
df2 <- gapminder  %>%
select(year, lifeExp, country, gdpPercap)%>%
filter(year == "1962" | year == "1997") %>%
ggplot(aes(x=gdpPercap, y=lifeExp, ))
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | year == "1997") %>%
ggplot(aes(x=gdpPercap, y=lifeExp, ))
t.test(data = df2, lifeExp ~ year)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | year == "1997") %>%
t.test(data = df2, lifeExp ~ year)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | year == "1997")
t.test(data = df2, lifeExp ~ year)
aggregate(df2 ~year, FUN=mean, data=data)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | year == "1997")
t.test(data = df2, lifeExp ~ year)
aggregate(df2 ~ df2[year], FUN=mean, data=data)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=df2)
View(df2agg)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder)
View(df2agg)
View(df2agg)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder) %>%
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder) %>%
ggplot(aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
View(df2agg)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder) %>%
ggplot(aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
View(df2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | year == "1997")
t.test(data = df2, lifeExp ~ year)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder)
ggplot(aes(x=year, y=lifeExp, data=df2agg))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
View(df2agg)
ggplot(aes(df2agg, x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
ggplot(df2agg,,aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
ggplot(df2agg,aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder) %>%
ggplot(aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
library(gapminder)
library(plyr)
data("gapminder")
attach(gapminder)
library(dplyr)
library(ggplot2)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | year == "1997")
t.test(data = df2, lifeExp ~ year)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder) %>%
ggplot(aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
View(df2agg)
library(gapminder)
library(plyr)
data("gapminder")
attach(gapminder)
library(dplyr)
library(ggplot2)
df1 <- gapminder  %>%
select(country, lifeExp) %>%
filter(country == "South Africa" | country == "Ireland")
t.test(dat = df1, lifeExp ~ country)
gapminder  %>%
filter(country == "Ireland") %>%
# filter(gdpPercap < 40000) %>%
ggplot(aes(x=year, y=lifeExp, col=gdpPercap, size=pop))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
gapminder  %>%
filter(continent == "Oceania") %>%
# filter(gdpPercap < 40000) %>%
ggplot(aes(x=year, y=lifeExp, col=gdpPercap, size=pop))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)+
facet_wrap(~country)
df2 <- gapminder  %>%
select(year, lifeExp)%>%
filter(year == "1962" | year == "1997")
t.test(data = df2, lifeExp ~ year)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder) %>%
ggplot(aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder) %>%
ggplot(aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder) %>%
ggplot(aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
ggplot(df2agg, aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
df2agg <- aggregate(lifeExp ~ year, FUN=mean, data=gapminder)
ggplot(df2agg, aes(x=year, y=lifeExp))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
summary(ddply(gapminder, .(year), head, n = 1) )
ddply(gapminder, .(year), head, n = 1)
gmagg1 <- ddply(gapminder, .(year), head, n = 1)
View(df2agg)
View(gmagg1)
View(gapminder)
View(df2agg)
unique(df2)
View(df2)
unique(df2(year))
unique(df2[year])
unique(df2.year)
unique(df2$year)
unique(gapminder$year)
dim(gapminder)
summary(gapminder)
str(gapminder)
head(gapminder, 5)
tail(gapminder, 5)
# t.test - null hypothesis, -> life expectancy is increasing
df3<-df1[complete.cases(df1),] %>%
select(lifeExp, year) %>%
filter(year == "1952" | year == "1953")
summary(df1)
# t.test - null hypothesis, -> life expectancy is increasing
df3<-df1[complete.cases(df1),] %>%
select(lifeExp, year) %>%
filter(year == "1952" | year == "1953")
names(gapminder)
dim(gapminder)
names(gapminder)
summary(gapminder)
str(gapminder)
head(gapminder, 5)
tail(gapminder, 5)
unique(gapminder$year)
gapminderf <- as.factor(gapminder)
gapminderf <- as.factor(gapminder$year)
View(dfx)
str(gapminderf)
gapminderf$year <- as.factor(gapminder$year)
View(gapminderf)
View(gapminderf)
gapminderf <- as.factor(gapminder$year)
View(df1)
View(df2)
df2$year <- as.factor(df2$year)
str(df2)
View(df2)
t.test(data = df2, lifeExp ~ year)
View(df2)
boxplot(x=df2$year, y=df2$lifeExp)
boxplot(df2$year ~ y=df2$lifeExp)
boxplot(df2$year ~ df2$lifeExp)
boxplot(year ~ lifeExp, df2)
gapminder[2,]
gapminder[,2]
gapminder["1997",]
gapminder[,"Year"]
gapminder[,"year"]
gapminder[c(2,4,6,8),]
gapminder[,c("year", "pop")]
#out of interest...
ggplot(dfplot, x=year, y=pop)
#out of interest...
ggplot(dfpop, x=year, y=pop)
dfpop <- gapminder[,c("year", "pop")]     #makes a subset of only the year and population columns
#out of interest...
ggplot(dfpop, x=year, y=pop)
#out of interest...
ggplot(dfpop, x=year, y=pop, col=country)+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
#out of interest...
ggplot(dfpop, aes(x=year, y=pop, col=country)+
#out of interest...
ggplot(dfpop, aes(x=year, y=pop, col=country))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
View(dfpop)
View(dfpop)
dfpop <- gapminder[,c("year", "pop", "country")]     #makes a subset of only the year and population columns
View(dfpop)
#out of interest...
ggplot(dfpop, aes(x=year, y=pop, col=country))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
#out of interest...
ggplot(dfpop, aes(x=year, y=pop))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
gapminder[,c("year", "pop", "country")] %>%     #makes a subset of only the year and population columns
filter(continent == "Europe") %>%
ggplot( aes(x=year, y=pop))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
gapminder[,c("year", "pop", "country", "continent")] %>%     #makes a subset of only the year and population columns
filter(continent == "Europe") %>%
ggplot( aes(x=year, y=pop))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)
gapminder[,c("year", "pop", "country", "continent")] %>%     #makes a subset of only the year and population columns
filter(continent == "Europe") %>%
ggplot( aes(x=year, y=pop))+
geom_point(alpha=0.3)+
geom_smooth(method=lm)+
facet_wrap(~country)
#
# Test odata
#
library('httr')
#
# Test odata
install.package(httr)
#
# Test odata
install.packages(httr)
#
# basic authentication credentials
#
#secret <- RCurl::base64(paste('username', 'password', sep = ":"));
#
# function to retrieve resource and return data.frame containing data
# Assumes simple 1 dimensional resource, no nested resources
#
getOdataResource <- function(url,auth){
response <- GET(url,config(httpheader = c("Authorization" = paste("Basic",auth))))
responseContent <- content(response,type="text/xml")
xmlNames <- xpathSApply(responseContent,'//m:properties[1]/d:*',xmlName)
properties <- xpathSApply(responseContent,'//m:properties/d:*',xmlValue)
propertiesDF <- as.data.frame(matrix(properties,ncol=length(xmlNames),byrow=TRUE))
names(propertiesDF) <- xmlNames
return(propertiesDF)
}
#
# Test odata
install.packages('httr')
#
library('httr')
library('XML')
install.packages('XML')
library('XML')
library('dplyr')
#
# basic authentication credentials
#
#secret <- RCurl::base64(paste('username', 'password', sep = ":"));
#
# function to retrieve resource and return data.frame containing data
# Assumes simple 1 dimensional resource, no nested resources
#
getOdataResource <- function(url,auth){
response <- GET(url,config(httpheader = c("Authorization" = paste("Basic",auth))))
responseContent <- content(response,type="text/xml")
xmlNames <- xpathSApply(responseContent,'//m:properties[1]/d:*',xmlName)
properties <- xpathSApply(responseContent,'//m:properties/d:*',xmlValue)
propertiesDF <- as.data.frame(matrix(properties,ncol=length(xmlNames),byrow=TRUE))
names(propertiesDF) <- xmlNames
return(propertiesDF)
}
#
# get products odata resource
#
products <- getOdataResource("http://open.statswales.gov.wales/en-gb/dataset/envi0201",secret)
url <- "http://open.statswales.gov.wales/en-gb/dataset/envi0201"
r <- GET(url)
stop_for_status(r)
content(r)
View(r)
url <- "http://open.statswales.gov.wales/en-gb/dataset/envi0201"
r <- GET(url)
stop_for_status(r)
getODataResource <- function(resourcePath,domain,usr,pwd){
url <- paste(domain, resourcePath,sep="")
# get the OData resource
response <- GET(url,authenticate(usr,pwd))
# parse xml docucument
responseContent <- content(response,type="text/xml")
# determine the names of the attributes
xmlNames <- xpathSApply(responseContent,
'//ns:entry[1]//m:properties[1]/d:*',xmlName,
namespaces = c(ns = "http://www.w3.org/2005/Atom",
m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata",
d="http://schemas.microsoft.com/ado/2007/08/dataservices"))
# determine all attribute values
properties <- xpathSApply(responseContent,'//m:properties/d:*',xmlValue)
# cast the attributes values into a data frame
propertiesDF <-
as.data.frame(matrix(properties,ncol=length(xmlNames),byrow=TRUE))
# set the column names
names(propertiesDF) <- xmlNames
return(propertiesDF)
}
domain <- "http://localhost:8080/"
username <- "demo_reporter"
password <- "goSfcsDj00"
customers <- getODataResource("odata/Orders/Customers()",domain,username,password)
addresses <-  getODataResource("odata/Orders/Address()",domain,username,password)
domain <- "http://open.statswales.gov.wales/en-gb/discover/"
username <- ""
password <- ""
customers <- getODataResource("metadata?$filter=Dataset%20eq%20%27envi0201%27",domain,username,password)
install.packages('xml2')
library('xml2'
library('xml2')
install.packages('xml2')
library('xml2')
# determine the names of the attributes
xmlNames <- xpathSApply(responseContent,
'//ns:entry[1]//m:properties[1]/d:*',xmlName,
namespaces = c(ns = "http://www.w3.org/2005/Atom",
m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata",
d="http://schemas.microsoft.com/ado/2007/08/dataservices"))
# determine all attribute values
properties <- xpathSApply(responseContent,'//m:properties/d:*',xmlValue)
getODataResource <- function(resourcePath,domain,usr,pwd){
url <- paste(domain, resourcePath,sep="")
# get the OData resource
response <- GET(url,authenticate(usr,pwd))
# parse xml docucument
responseContent <- content(response,type="text/xml")
# determine the names of the attributes
xmlNames <- xpathSApply(responseContent,
'//ns:entry[1]//m:properties[1]/d:*',xmlName,
namespaces = c(ns = "http://www.w3.org/2005/Atom",
m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata",
d="http://schemas.microsoft.com/ado/2007/08/dataservices"))
# determine all attribute values
properties <- xpathSApply(responseContent,'//m:properties/d:*',xmlValue)
# cast the attributes values into a data frame
propertiesDF <-
as.data.frame(matrix(properties,ncol=length(xmlNames),byrow=TRUE))
# set the column names
names(propertiesDF) <- xmlNames
return(propertiesDF)
}
getODataResource <- function(resourcePath,domain,usr,pwd){
url <- paste(domain, resourcePath,sep="")
# get the OData resource
response <- GET(url,authenticate(usr,pwd))
# parse xml docucument
responseContent <- content(response,type="text/xml")
# determine the names of the attributes
xmlNames <- xpathSApply(responseContent,
'//ns:entry[1]//m:properties[1]/d:*',xmlName,
namespaces = c(ns = "http://www.w3.org/2005/Atom",
m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata",
d="http://schemas.microsoft.com/ado/2007/08/dataservices"))
# determine all attribute values
properties <- xpathSApply(responseContent,'//m:properties/d:*',xmlValue)
# cast the attributes values into a data frame
propertiesDF <-
as.data.frame(matrix(properties,ncol=length(xmlNames),byrow=TRUE))
# set the column names
names(propertiesDF) <- xmlNames
return(propertiesDF)
}
domain <- "http://open.statswales.gov.wales/en-gb/discover/"
username <- ""
password <- ""
customers <- getODataResource("metadata?$filter=Dataset%20eq%20%27envi0201%27",domain,username,password)
setwd(("Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny"))
setwd("Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny")
setwd("Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny")
getwd()
setwd("Z:/DDS")
setwd("Z:/DDS/DDS30000 Research Capacity")
setwd("Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny")
setwd("Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/appprototype")
library(leaflet)
leaflet() %>%
addProviderTiles("CartoDB.PositronNoLabels")
leaflet() %>%
addProviderTiles("WorldTopoMap.NoLabels")
leaflet() %>%
addProviderTiles("WorldTopoMap")
leaflet() %>%
addProviderTiles("Esri.WorldTopoMap")
leaflet() %>%
addProviderTiles("Esri.WorldTopoMapNoLabels")
shiny::runApp('Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/AppPrototype')
runApp('Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/AppPrototype')
runApp('Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/AppPrototype')
runApp('Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/AppPrototype')
runApp('Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/AppPrototype')
runApp('Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/AppPrototype')
runApp('Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/AppPrototype')
runApp('Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/AppPrototype')
runApp('Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/AppPrototype')
leaflet() %>%
addProviderTiles("Esir.WorldTopoMap")
runApp('Z:/DDS/DDS30000 Research Capacity/Data Science/R_Shiny/AppPrototype')
leaflet() %>%
addProvierTiles("CartDB")
leaflet() %>%
addProviderTiles("CartoDB") %>%
addProviderTiles("OpenRailWayMap")
library(rsconnect)
rsconnect::setAccountInfo(name='dctest', token='F85FA1F05F46FA2BC4B398B63E3C96F4', secret='3jJX5m/nBr7JrqS3hNMA/cDqhGgVbnVypVgh1uhM')
deployApp()
deployApp()
